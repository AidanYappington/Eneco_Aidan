@page "/reservation"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ReservationService ReservationService
@inject NavigationManager NavigationManager
@inject RoomService RoomService
@inject UserManager<User> UserManager

<PageTitle>Reservation</PageTitle>


<EditForm Model="Reservation" OnValidSubmit="HandleSubmit">
    <label>
        Date:
        <input type="date" min="@DateTime.Now.ToString("yyyy’-‘MM’-‘dd")" @bind="Date"/>
    </label>
    <label>
        Start Time:
        <input type="time" @bind="StartTime"/>
    </label>
    <label>
        End Time:
        <input type="time" @bind="EndTime"/>
    </label>
    <button type="submit">Save</button>
    <button @onclick="() => Reservation = null">Cancel</button>
</EditForm>


@code {
    [SupplyParameterFromForm] public Reservation? Reservation { get; set; }
    [SupplyParameterFromQuery] public Guid RoomId { get; set; }
    private Room Room { get; set; } = null!;
    private AuthenticationState _authenticationState;
    DateTime Date;
    TimeOnly StartTime;
    TimeOnly EndTime;

    protected override async Task OnInitializedAsync()
    {
        Reservation = new Reservation();
        Room = await RoomService.GetRoomByIdAsync(RoomId);
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async Task HandleSubmit()
    {
        if (Reservation == null) return;

        var user = await UserManager.FindByNameAsync(_authenticationState.User.Identity!.Name!);
        
        Reservation.UserId = Guid.Parse(user!.Id).ToString();
        Reservation.Room = Room;
        Reservation.StartDate = Date.Date.Add(StartTime.ToTimeSpan()).ToUniversalTime();
        Reservation.EndDate = Date.Date.Add(EndTime.ToTimeSpan()).ToUniversalTime();

        await ReservationService.CreateReservationAsync(Reservation);
        NavigationManager.NavigateTo("/roomtable");
    }

}