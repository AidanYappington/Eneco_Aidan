@page "/roomtable"
@inject RoomService RoomService

<button @onclick="() => Room = new Room()">New Room</button>
@if (Room is not null)
{
    <EditForm Model="Room" OnValidSubmit="HandleSubmit">
        <label>
            FloorNumber:
            <InputNumber @bind-Value="Room!.FloorNumber"/>
        </label>
        <label>
            Wing:
            <InputSelect @bind-Value="Room!.Wing">
                <option>Select an option</option>
                <option value="A">A</option>
                <option value="B">B</option>
                <option value="C">C</option>
            </InputSelect>
        </label>
        <label>
            Room number:
            <InputNumber @bind-Value="Room!.RoomNumber"/>
        </label>
        <label>
            Name:
            <InputText @bind-Value="Room!.Name"/>
        </label>
        <label>
            Type:
            <InputText @bind-Value="Room!.Type"/>
        </label>
        <label>
            Max Workspaces:
            <input type="number" min="0" @bind="Room!.MaxWorkspaces"/>
        </label>
        <label>
            Max Reservations:
            <input type="number" min="0" @bind="Room!.MaxReservations"/>
        </label>
        <button type="submit">Save</button>
    </EditForm>
}

<h3>Floor 1</h3>
<table class="table table-striped">
    <thead>
    <tr>
        <th>Availability</th>
        <th>Room Number</th>
        <th>Room Type</th>
        <th>Room Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var room in Rooms.Where(r => r.FloorNumber == 1))
    {
        <tr @onclick:preventDefault @onclick="() => SelectRoom(room)">
            <td>@(room.IsAvailable(DateTime.Today, DateTime.Today.AddDays(1)) ? "Available" : "Occupied")</td>
            <td>@room.RoomNumber</td>
            <td>@room.Type</td>
            <td>@room.Name</td>
        </tr>
    }
    </tbody>
</table>

<h3>Floor 2</h3>
<table class="table table-striped">
    <thead>
    <tr>
        <th>Availability</th>
        <th>Room Number</th>
        <th>Room Type</th>
        <th>Room Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var room in Rooms.Where(r => r.FloorNumber == 2))
    {
        <tr>
            <td>@(room.IsAvailable(DateTime.Today, DateTime.Today.AddDays(1)) ? "Available" : "Occupied")</td>
            <td>@room.RoomNumber</td>
            <td>@room.Type</td>
            <td>@room.Name</td>
        </tr>
    }
    </tbody>
</table>

<h3>Floor 3</h3>
<table class="table table-striped">
    <thead>
    <tr>
        <th>Availability</th>
        <th>Room Number</th>
        <th>Room Type</th>
        <th>Room Name</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var room in Rooms.Where(r => r.FloorNumber == 3))
    {
        <tr>
            <td>@(room.IsAvailable(DateTime.Today, DateTime.Today.AddDays(1)) ? "Available" : "Occupied")</td>
            <td>@room.RoomNumber</td>
            <td>@room.Type</td>
            <td>@room.Name</td>
        </tr>
    }
    </tbody>
</table>

@code {
    [SupplyParameterFromForm] public Room? Room { get; set; }

    private List<Room> Rooms { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Room = null;
        Rooms = (await RoomService.GetAllRoomsAsync()).ToList();
    }

    private void SelectRoom(Room room) => Room = room;

    private async Task HandleSubmit()
    {
        if (Room == null) return;
        if (await RoomService.UpdateRoomAsync(Room) == null)
            await RoomService.CreateRoomAsync(Room);
        await OnInitializedAsync();
    }

}