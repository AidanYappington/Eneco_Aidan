@page "/roomtable"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject RoomService RoomService
@inject ReservationService ReservationService
@inject NavigationManager NavigationManager
@inject UserManager<User> UserManager

@foreach (var floor in Rooms.Select(r => r.FloorNumber).Distinct().Order())
{
    <h3>Floor @floor</h3>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Availability</th>
            <th>Room Code</th>
            <th>Room Type</th>
            <th>Room Name</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var room in Rooms.Where(r => r.FloorNumber == floor).OrderBy(r => r.Wing).ThenBy(r => r.RoomNumber))
        {
            <tr>
                <td>@(room.IsAvailable(DateTime.Today, DateTime.Today.AddDays(1)) ? "Available" : "Occupied")</td>
                <td>@room.RoomCode</td>
                <td>@room.Type</td>
                <td>@room.Name</td>
                <td>
                    <button @onclick="() => HandleReservation(room)">Reserve Workspace</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm] public Room? Room { get; set; }
    [SupplyParameterFromQuery] public string localStartDateTimeString { get; set; }
    [SupplyParameterFromQuery] public string localEndDateTimeString { get; set; }
    private AuthenticationState _authenticationState;
    

    private List<Room> Rooms { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        Rooms = (await RoomService.GetAllRoomsAsync()).ToList();
        _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Console.WriteLine(localStartDateTimeString);




    }
    
    private void SelectRoom(Room room) => Room = room;

    private async Task HandleSubmit()
    {
        if (Room == null) return;
        if (await RoomService.UpdateRoomAsync(Room) == null)
            await RoomService.CreateRoomAsync(Room);
        await OnInitializedAsync();
    }

    private async Task HandleReservation(Room room)
    {
        Reservation Reservation = new Reservation();
        DateTime localStartDateTime = DateTime.Parse(localStartDateTimeString);
        DateTime localEndDateTime = DateTime.Parse(localEndDateTimeString);
        var user = await UserManager.FindByNameAsync(_authenticationState.User.Identity!.Name!);
        var userId = Guid.Parse(user!.Id).ToString();
        Reservation.UserId = userId;
        Reservation.SetBookable(room, "room");
        var utcStartDateTime = TimeZoneInfo.ConvertTimeToUtc(localStartDateTime);
        var utcEndDateTime = TimeZoneInfo.ConvertTimeToUtc(localEndDateTime);
        Reservation.StartDate = utcStartDateTime;
        Reservation.EndDate = utcEndDateTime;
        await ReservationService.CreateReservationAsync(Reservation);
    }
}
