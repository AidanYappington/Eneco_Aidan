@page "/"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject RoomService RoomService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject AppDbContext Context
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1 style="color: white; background: rgba(255, 64, 0, 0.7); text-align: center; border-radius: 15px; font-family: Futura, sans-serif">
    Welcome to the Eneco Home Page
</h1>
<h3>Make a reservation:</h3>

<label for="floor-select">Select Floor:</label>
<InputSelect id="floor-select" @bind-Value="selectedFloor">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
</InputSelect>


<button @onclick="HandleReservation"> Select Your time and date</button>

<div class="content-container">
    <!-- Interactable Image with Clickable Area -->
    <div class="image-container">
        <img src="MockupFloorplan.png" class="interactable-image" usemap="#image-map"/>
        <map name="image-map">
            <area shape="rect" coords="130,350,250,420" href="javascript:void(0);" @onclick="OnArea1Click"/>
            <area shape="rect" coords="550,350,700,420" href="javascript:void(0);" @onclick="OnArea2Click"/>
            <area shape="rect" coords="330,680,410,740" href="javascript:void(0);" @onclick="OnArea3Click"/>
        </map>
    </div>

    <!-- Rooms Overview -->
    <div class="rooms-overview">
        <h3>Floor @selectedFloor</h3>
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Availability</th>
                <th>Room Code</th>
                <th>Room Type</th>
                <th>Room Name</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var room in Rooms.Where(r => r.FloorNumber == selectedFloor))
            {
            <tr @onclick:preventDefault @onclick="() => SelectRoom(room)">
                <td>@(room.IsAvailable(DateTime.Today, DateTime.Today.AddDays(1)) ? "Available" : "Occupied")</td>
                <td>@room.RoomCode</td>
                <td>@room.Type</td>
                <td>@room.Name</td>
            </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<!-- Your reservations section -->
<div>
    <h3>Your reservations</h3>
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Start Date</th>
            <th>End Date</th>
            <th>Booking ID</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var reservation in Reservations)
        {
        <tr>
            <td>@reservation.StartDate.ToLocalTime().ToString("F")</td>
            <td>@reservation.EndDate.ToLocalTime().ToString("F")</td>
            <td>@reservation.Bookable?.Id</td>
        </tr>
        }
        </tbody>
    </table>
</div>

@code {
    
    
private int selectedFloor { get; set; } = 1; // Initialize with default value
private List<Reservation> Reservations { get; set; } = new List<Reservation>();
private List<Data.Room> Rooms { get; set; } = new List<Data.Room>();
private AuthenticationState _authenticationState;
private User User { get; set; }
private Data.Room? CurrentRoom { get; set; }

protected override async Task OnInitializedAsync()
{
_authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
User = await UserManager.FindByNameAsync(_authenticationState.User.Identity.Name);

// Fetch reservations
Reservations = await Context.Reservations
.AsQueryable()
.Where(r => r.UserId == User.Id)
.Include(r => r.Room)
.Include(r => r.Workspace)
.ToListAsync();

// Fetch rooms
Rooms = (await RoomService.GetAllRoomsAsync()).ToList();
}

private void HandleReservation()
{
NavigationManager.NavigateTo($"reservation?floor={selectedFloor}");
}

private void OnArea1Click()
{
Console.WriteLine("Wing A!");
}

private void OnArea2Click()
{
Console.WriteLine("Clicked on wing B");
}

private void OnArea3Click()
{
Console.WriteLine("That's wing C");
}

private void SelectRoom(Data.Room room) => CurrentRoom = room;

private async Task DeleteRoom(Guid roomId)
{
await RoomService.DeleteRoomAsync(roomId);
Rooms = (await RoomService.GetAllRoomsAsync()).ToList();
}
}


<style>
    body {
        background-color: white; /* Set background to white */
        overflow-x: hidden;
    }

    .top-row.px-4 {
        background: rgba(255, 255, 255, 80%) !important;
    }

    .content-container {
        display: flex;
        justify-content: space-between;
        padding: 20px;
    }

    .image-container {
        flex: 1;
        display: flex;
        align-items: flex-start;
    }

    .rooms-overview {
        flex: 2;
        padding-left: 20px;
    }

    .interactable-image {
        display: block;
        width: 100%;
        max-width: 600px;
        border: 6px solid #ff5733;
        border-radius: 10px;
        transition: transform 1.3s ease-out;
    }

    .interactable-image:hover {
        transform: scale(1.05);
    }

    .table {
        width: 100%;
    }
</style>
