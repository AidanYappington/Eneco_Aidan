@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> UserManager
@inject AppDbContext Context
@inject NavigationManager NavigationManager
@inject ReservationService ReservationService
@inject RoomService RoomService



<PageTitle>Home</PageTitle>

<h1 style="color: white; background: rgba(255, 64, 0, 0.7); text-align: center; border-radius: 15px; font-family: Futura, sans-serif">
    Welcome to the Eneco Home Page
</h1>

<h3>Your data:</h3>

<!-- Notification message -->
@if (!string.IsNullOrEmpty(NotificationMessage))
{
<div class="alert alert-warning">
    @NotificationMessage
</div>
}

@*<label for="floor-select">Select Floor:</label>
<InputSelect id="floor-select" @bind-Value="selectedFloor">
    <option value="1">1</option>
    <option value="2">2</option>
    <option value="3">3</option>
</InputSelect>*@

<!-- Reservation Form Integration -->
@*
<ReservationForm @ref="reservationForm" OnTemporarySave="HandleTemporarySave" />
*@
<ReservationForm @ref="reservationForm" OnTemporaryReservationChange="HandleTemporaryReservationChange" />


<h3>Click a room to make a reservation:</h3>

<div class="content-container">
    <!-- Interactable Image with Clickable Area -->
    <div class="image-container">
        <img src="floorplanscreenshot.png" class="interactable-image" usemap="#image-map"/>
        <map name="image-map">
            <area shape="rect" coords="130,350,250,420" href="javascript:void(0);" @onclick="OnArea1Click"/>
            <area shape="rect" coords="550,350,700,420" href="javascript:void(0);" @onclick="OnArea2Click"/>
            <area shape="rect" coords="330,680,410,740" href="javascript:void(0);" @onclick="OnArea3Click"/>
        </map>
    </div>

    <!-- Rooms Overview -->
    <div class="rooms-overview">
        <h3>Floor @selectedFloor</h3>
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Availability</th>
                <th>Room Code</th>
                <th>Room Type</th>
                <th>Room Name</th>
                @if (!Viewing)
                {
                    <th>Actions</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (var room in Rooms.Where(r => r.FloorNumber == selectedFloor).OrderBy(r => r.RoomCode))
            {
            <tr>
                <td>@(IsRoomAvailable(room) ? "Available" : "Available")</td>
                <td>@room.RoomCode</td>
                <td>@room.Type</td>
                <td>@room.Name</td>
                @if (!Viewing)
                {
                <td>
                    <button @onclick="() => HandleReservation(room)">Reserve Workspace</button>
                </td>
                }
            </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<!-- Your reservations section -->
<div>
    <h3>Your reservations</h3>
    <table class="table table-striped">
        <thead>
        <tr>
            @*
            <th>Room Code</th>
            *@
            <th>Start Date</th>
            <th>End Date</th>
            <th>Booking ID</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var reservation in Reservations)
        {
            <tr>
                @*
                <td>@reservation.RoomId("F")</td>
                *@
                <td>@reservation.StartDate.ToLocalTime().ToString("F")</td>
                <td>@reservation.EndDate.ToLocalTime().ToString("F")</td>
                <td>@reservation.RoomId</td>
            </tr>
        }
        </tbody>
    </table>
</div>

@code {
private int selectedFloor { get; set; } = 1; // Initialize with default value
private List<Reservation> Reservations { get; set; } = new List<Reservation>();
private List<Data.Room> Rooms { get; set; } = new List<Data.Room>();
private User User { get; set; }
private Data.Room? CurrentRoom { get; set; }
private AuthenticationState _authenticationState;


[SupplyParameterFromForm] public Room? Room { get; set; }
[SupplyParameterFromQuery] public bool Viewing { get; set; }
[SupplyParameterFromQuery] public string localStartDateTimeString { get; set; } = string.Empty;
[SupplyParameterFromQuery] public string localEndDateTimeString { get; set; } = string.Empty;

private ReservationForm reservationForm;
private Reservation temporaryReservation;
private string NotificationMessage { get; set; } = string.Empty;



protected override async Task OnInitializedAsync()
{
    // pakken van alle rooms
    Rooms = (await RoomService.GetAllRoomsAsync()).ToList();

    // pakken van de reserveringen
    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    User = await UserManager.FindByNameAsync(authState.User.Identity.Name);
    Reservations = await Context.Reservations
        .AsQueryable()
        .Where(r => r.UserId == User.Id)
        .Include(r => r.Room)
        .Include(r => r.Workspace)
        .ToListAsync();
    
    Rooms = (await RoomService.GetAllRoomsAsync()).ToList();
    Reservations = (await ReservationService.GetAllReservationsAsync()).ToList();
    _authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
}

private bool IsRoomAvailable(Room room)
{
    
    if (!DateTime.TryParse(localStartDateTimeString, out var localStartDateTime) ||
        !DateTime.TryParse(localEndDateTimeString, out var localEndDateTime))
    {
        return false;
    }

    return Reservations.Where(r => r.RoomId == room.Id).All(
        reservation => localStartDateTime >= reservation.EndDate 
                       || localEndDateTime <= reservation.StartDate);
}



private void HandleTemporaryReservationChange((Reservation reservation, int floor)data)
{
    temporaryReservation = data.reservation;
    selectedFloor = data.floor;
    // Optionally, perform further actions with temporaryReservation
}

public async Task OnArea1Click()
{
    Guid roomid;
    
    if (selectedFloor == 1)
    {
        roomid = new Guid("17d0175e-11b1-42a0-a6e5-77a36172fc2a");
    }

    else if (selectedFloor == 2)
    {
        roomid = new Guid("bb4e6e79-f3b7-45de-8f61-49a2fd8915b5");

    }
    else if (selectedFloor == 3)
    {
        roomid = new Guid("da629c62-6454-4814-b703-63e355f59592");

    }
    else
    {
        NotificationMessage = "Please select + save your date and time for the reservation.";
        return;
    }
    
    /*if (temporaryReservation == null)
    {
        // Handle missing temporary reservation
        NotificationMessage = "Please select + save your date and time for the reservation.";
        return;
    }*/

    /*if (!DateTime.TryParse(localStartDateTimeString, out var localStartDateTime) ||
        !DateTime.TryParse(localEndDateTimeString, out var localEndDateTime))
    {
        // Handle invalid date input (optional)
        return;
    }*/
    
    Console.WriteLine("TWO STEP");

    
    var user = await UserManager.FindByNameAsync(_authenticationState.User.Identity?.Name);
    if (user == null) return;

    Console.WriteLine("oi butcher");

    
    var reservation = new Reservation
    {
        UserId = Guid.Parse(user.Id).ToString(),
        RoomId = roomid,
        StartDate = TimeZoneInfo.ConvertTimeToUtc(temporaryReservation.StartDate),
        EndDate = TimeZoneInfo.ConvertTimeToUtc(temporaryReservation.EndDate),
            
    };
    
    await ReservationService.CreateReservationAsync(reservation);
    
}

private void OnArea2Click()
{
    selectedFloor = 2;
    Console.WriteLine("Clicked on Wing B");
}

private void OnArea3Click()
{
    selectedFloor = 3;
    Console.WriteLine("Clicked on Wing C");
}

private void SelectRoom(Data.Room room)
{
    CurrentRoom = room;
    reservationForm.SetRoom(room); // Pass selected room to the reservation form
}

private async Task HandleReservation(Data.Room room)
{
    /*if (!DateTime.TryParse(localStartDateTimeString, out var localStartDateTime) ||
        !DateTime.TryParse(localEndDateTimeString, out var localEndDateTime))
    {
        // Handle invalid date input (optional)
        return;
    }*/
    
    

    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    var user = await UserManager.FindByNameAsync(authState.User.Identity?.Name);
    if (user == null) return;

    var reservation = new Reservation
    {
        UserId = Guid.Parse(user.Id).ToString(),
        RoomId = room.Id,
        StartDate = TimeZoneInfo.ConvertTimeToUtc(temporaryReservation.StartDate),
        EndDate = TimeZoneInfo.ConvertTimeToUtc(temporaryReservation.EndDate)
    };

    await ReservationService.CreateReservationAsync(reservation);

    // Update room, user, and navigate
    await RoomService.UpdateRoomAsync(room);
    var index = Rooms.FindIndex(r => r.Id == room.Id);
    if (index != -1)
    {
        Rooms[index] = room;
    }

    await UserManager.UpdateAsync(user);

    NavigationManager.NavigateTo("");
}


}



<style>
    body {
        background-color: white; /* Set background to white */
        overflow-x: hidden;
    }

    .top-row.px-4 {
        background: rgba(255, 255, 255, 80%) !important;
    }

    .content-container {
        display: flex;
        justify-content: space-between;
        padding: 20px;
    }

    .image-container {
        flex: 1;
        display: flex;
        align-items: flex-start;
    }

    .rooms-overview {
        flex: 2;
        padding-left: 20px;
    }

    .interactable-image {
        display: block;
        width: 100%;
        max-width: 600px;
        border: 6px solid #ff5733;
        border-radius: 10px;
        transition: transform 1.3s ease-out;
    }

    .interactable-image:hover {
        transform: scale(1.05);
    }

    .table {
        width: 100%;
    }
</style>