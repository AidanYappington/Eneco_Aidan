@page "/Statistics"
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@inject ReservationService ReservationService
@inject RoomService RoomService

<PageTitle>Statistics</PageTitle>

<div>
    <h1>Statistics Page</h1>
    <Chart Config="_config"></Chart>
    
    <h3>Active Floors</h3>
    @foreach (var floor in activeFloors)
    {
        <div>
            <p>Floor: @floor.FloorNumber</p>
            <ul>
                @foreach (var roomNumber in floor.RoomNumbers)
                {
                    <li>Room: @roomNumber</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private List<Reservation> Reservations { get; set; } = [];
    private List<(int FloorNumber, List<int?> RoomNumbers)> activeFloors { get; set; } = new List<(int FloorNumber, List<int?> RoomNumbers)>();
    private BarConfig _config;

    protected override void OnInitialized()
    {
        
    }

    protected override async Task OnInitializedAsync()
{
    _config = new BarConfig
    {
        Options = new BarOptions
        {
            Scales = new BarScales // Configure the scales
            {
                YAxes = new List<CartesianAxis> // Configure the y-axis
                {
                    new BarLinearCartesianAxis
                    {
                        Ticks = new LinearCartesianTicks() // Configure the ticks
                        {
                            BeginAtZero = true, // Set beginAtZero to true
                            StepSize = 1, // so no decimals show in the y-axis. might be messy in the y-axis, if there are a lot of reservations
                        }
                    }
                }
            },
            Responsive = true,
            Title = new OptionsTitle
            {
                Display = true,
                Text = "Reservations for today and tomorrow!"
            }
        }
    };

    var now = DateTime.Now.Date;
    
    Reservations = (await ReservationService.GetAllReservationsAsync())
        .Where(r => r.StartDate.Date >= now && r.StartDate.Date <= now.AddDays(1))
        .OrderBy(r => r.StartDate)
        .ToList();
    
    var activeReservations = (await ReservationService.GetAllReservationsAsync())
        .Where(r => r.StartDate.Date <= now && r.EndDate.Date >= now)
        .OrderBy(r => r.StartDate)
        .ToList();
    
    foreach (var reservation in activeReservations)
    {
        var room = await RoomService.GetRoomByIdAsync(reservation.RoomId);
        if (room != null)
        {
            var existingFloor = activeFloors.FirstOrDefault(f => f.FloorNumber == room.FloorNumber);
            if (existingFloor != default)
            {
                existingFloor.RoomNumbers.Add(room.RoomNumber);
            }
            else
            {
                activeFloors.Add((room.FloorNumber, new List<int?> { room.RoomNumber }));
            }
        }
    }
    activeFloors = activeFloors.Distinct().ToList();

    int[] reservationCounts = new int[5];
    for (int i = 0; i < 5; i++)
    {
        var targetDate = now.AddDays(i);
        reservationCounts[i] = Reservations.Count(r => r.StartDate.Date == targetDate);
    }

    // lijst van opkomende 2 dagen hier maken
    var labels = new string[2];
    for (int i = 0; i < 2; i++)
    {
        labels[i] = now.AddDays(i).DayOfWeek.ToString();
    }

    foreach (var label in labels)
    {
        _config.Data.Labels.Add(label);
    }

    var dataset = new BarDataset<int>(reservationCounts) // aantal reserveringen per dag hier
    {
        Label = "Reservations",
        BackgroundColor = new[]
        {
            ColorUtil.ColorHexString(255, 99, 132), // als zelfde kleur als side bar (255,87,51)
            ColorUtil.ColorHexString(255, 99, 132),
        }
    };

    _config.Data.Datasets.Add(dataset);
}

}