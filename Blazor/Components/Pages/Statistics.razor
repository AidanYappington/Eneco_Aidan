@page "/Statistics"
@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@inject ReservationService ReservationService
@inject RoomService RoomService

<PageTitle>Statistics</PageTitle>

<div>
    <h1>Statistics Page</h1>
    <Chart Config="_config"></Chart>
    
    <h3>Active Floors</h3>
    @foreach (var floor in activeFloors)
    {
        <div>
            <p>Floor: @floor.FloorNumber</p>
            <ul>
                @foreach (var roomNumber in floor.RoomNumbers)
                {
                    <li>Room: @roomNumber</li>
                }
            </ul>
        </div>
    }
</div>

@code {
    private List<Reservation> Reservations { get; set; } = new();
    private List<(int FloorNumber, List<int?> RoomNumbers)> activeFloors { get; set; } = new();
    private BarConfig _config;

    protected override void OnInitialized()
    {
    }

    protected override async Task OnInitializedAsync()
    {
        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Scales = new BarScales
                {
                    YAxes = new List<CartesianAxis>
                    {
                        new BarLinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true,
                                StepSize = 1,
                            }
                        }
                    }
                },
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "Reservations for today and tomorrow!"
                }
            }
        };

        var today = DateTime.Now.Date;
        var now = DateTime.Now;

        Reservations = (await ReservationService.GetAllReservationsAsync())
            .Where(r => r.StartDate.Date >= today && r.StartDate.Date <= today.AddDays(1))
            .OrderBy(r => r.StartDate)
            .ToList();

        var activeReservations = (await ReservationService.GetAllReservationsAsync())
            .Where(r => r.StartDate.AddHours(2) <= now && r.EndDate.AddHours(2) >= now)
            .OrderBy(r => r.StartDate)
            .ToList();

        var tempActiveFloors = new List<(int FloorNumber, List<int?> RoomNumbers)>();

        foreach (var reservation in activeReservations)
        {
            var room = await RoomService.GetRoomByIdAsync(reservation.RoomId);
            if (room != null)
            {
                var existingFloor = tempActiveFloors.FirstOrDefault(f => f.FloorNumber == room.FloorNumber);
                if (existingFloor != default)
                {
                    existingFloor.RoomNumbers.Add(room.RoomNumber);
                }
                else
                {
                    tempActiveFloors.Add((room.FloorNumber, new List<int?> { room.RoomNumber }));
                }
            }
        }

        activeFloors = tempActiveFloors.Select(f => (f.FloorNumber, f.RoomNumbers.Distinct().ToList())).ToList();

        int[] reservationCounts = new int[2];
        for (int i = 0; i < 2; i++)
        {
            var targetDate = today.AddDays(i);
            reservationCounts[i] = Reservations.Count(r => r.StartDate.Date == targetDate);
        }

        var labels = new string[2];
        for (int i = 0; i < 2; i++)
        {
            labels[i] = today.AddDays(i).DayOfWeek.ToString();
        }

        foreach (var label in labels)
        {
            _config.Data.Labels.Add(label);
        }

        var dataset = new BarDataset<int>(reservationCounts)
        {
            Label = "Reservations",
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255, 99, 132),
                ColorUtil.ColorHexString(255, 99, 132),
            }
        };

        _config.Data.Datasets.Add(dataset);
    }
}
